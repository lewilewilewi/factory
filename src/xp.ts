import { Connection, PublicKey } from '@solana/web3.js';
import { Program, Provider, web3, BN } from '@project-serum/anchor';
import { TOKEN_PROGRAM_ID } from '@solana/spl-token';
import { IDL } from './types/xp_program';
import {
  XpVars,
  XpModifier,
  XpAccount,
  UserXpAccount,
  UserXpAccountItem,
  XpModifierItem,
} from './types/xp_accounts';
import type { Xp } from './types/xp_program';

/** Export account types */
export * from './types/xp_accounts';
export * from './types/xp_program';

const XP_VARS_GLOBAL_SEED = Buffer.from('XPVarsGlobal');
const XP_ACCOUNT_SEED = Buffer.from('XP_Account');
const XP_MODIFIER_SEED = Buffer.from('XP_Modifier');
const USER_XP_SEED = Buffer.from('UserXP');

/**
 * Returns the public key and bump seed for the Xp Vars Account
 *
 * @param programId - deployed program ID for XP program
 * @returns [Xp Vars account public key, bump seed]
 */
export async function findXpVarsAccount(
  programId: PublicKey
): Promise<[PublicKey, number]> {
  return await PublicKey.findProgramAddress([XP_VARS_GLOBAL_SEED], programId);
}

/**
 * Returns the public key and bump seed for the Xp Account
 *
 * @param label - XP Account label
 * @param programId - deployed program ID for XP program
 * @returns [Xp Account public key, bump seed]
 */
export const findXpAccount = async (
  label: string,
  programId: PublicKey
): Promise<[PublicKey, number]> => {
  return await PublicKey.findProgramAddress(
    [XP_ACCOUNT_SEED, Buffer.from(label)],
    programId
  );
};

/**
 * Returns the public key and bump seed for the User Xp Account
 *
 * @param xpAccountKey - XP Account public key
 * @param userAccountKey - User's Account public key
 * @param programId - deployed program ID for XP program
 * @returns [User Xp Account public key, bump seed]
 */
export const findUserXpAccount = async (
  xpAccountKey: PublicKey,
  userAccountKey: PublicKey,
  programId: PublicKey
): Promise<[PublicKey, number]> => {
  return await PublicKey.findProgramAddress(
    [USER_XP_SEED, xpAccountKey.toBuffer(), userAccountKey.toBuffer()],
    programId
  );
};

/**
 * Returns the public key and bump seed for the Xp Modifier Account
 *
 * @param xpAccountKey - XP Account public key
 * @param modifierKey - Modifier public key
 * @param programId - deployed program ID for XP program
 * @returns [Xp Modifier Account public key, bump seed]
 */
export const findXpModifierAccount = async (
  xpAccountKey: PublicKey,
  modifierKey: PublicKey,
  programId: PublicKey
): Promise<[PublicKey, number]> => {
  return await PublicKey.findProgramAddress(
    [XP_MODIFIER_SEED, xpAccountKey.toBuffer(), modifierKey.toBuffer()],
    programId
  );
};

/**
 * Returns the base IDL for the XP program following as generated by Anchor with provided program ID appended to metadata.
 *
 * @param programId - Deployed program ID for the XP program
 * @returns - The base IDL object
 */
export function getXpIDL(programId: web3.PublicKey): unknown {
  const _tmp = IDL;
  _tmp['metadata'] = { address: programId.toBase58() };
  return _tmp;
}

/**
 * Get the XP Anchor program
 * @param connection - the Solana connection object
 * @param programId - Deployed program ID for the XP program
 * @returns the XP anchor program
 */
export const getXpProgram = (
  connection: Connection,
  programId: web3.PublicKey
) => {
  const idl = getXpIDL(programId);
  const provider = new Provider(connection, null, null);
  const program = new Program(<Xp>idl, programId, provider);
  return program;
};

/** Base Params for instructions */
interface BaseParams {
  connection: Connection /** the Solana connection object */;
  programId: web3.PublicKey /** Deployed program ID for the XP program */;
}

/** Params for Init instruction */
export interface InitXpVarsParams extends BaseParams {
  admin: PublicKey /** the admin public key */;
}

/**
 * Initialize the XP Vars Account
 * @param param - the input parameters
 */
export const initXpVarsIx = async ({
  admin,
  connection,
  programId,
}: InitXpVarsParams) => {
  const program = getXpProgram(connection, programId);
  const [xpVarsAccountKey] = await findXpVarsAccount(program.programId);

  const instructions = [
    program.instruction.init({
      accounts: {
        admin,
        xpVarsAccount: xpVarsAccountKey,
        systemProgram: web3.SystemProgram.programId,
      },
    }),
  ];

  return {
    xpVarsAccount: xpVarsAccountKey,
    instructions,
  };
};

/** Params for Register XP Account instruction */
export interface RegisterXpAccountParams extends BaseParams {
  admin: PublicKey /** the admin public key */;
  label: string /** The XP account label */;
  xpLimit: BN /** The XP limit */;
  tokenRequired: boolean /** Whether a token is required */;
  tokenQuantity: BN /** The token quantity to burn*/;
  tokenMintKey?: PublicKey /** The required token mint */;
}

/**
 * Registers an XP Account
 * @param param - the input parameters
 */
export const registerXpAccountIx = async ({
  admin,
  connection,
  label,
  xpLimit,
  tokenRequired,
  tokenQuantity,
  tokenMintKey,
  programId,
}: RegisterXpAccountParams) => {
  const program = getXpProgram(connection, programId);
  const [xpVarsAccountKey] = await findXpVarsAccount(program.programId);
  const [xpAccountKey] = await findXpAccount(label, program.programId);

  if (tokenRequired && !tokenMintKey) {
    throw new Error('The token mint is required');
  }

  const instructions = [
    program.instruction.registerXpAccount(
      label,
      tokenRequired,
      tokenQuantity,
      xpLimit,
      {
        accounts: {
          admin,
          xpVarsAccount: xpVarsAccountKey,
          xpAccount: xpAccountKey,
          systemProgram: web3.SystemProgram.programId,
        },
        ...(tokenRequired &&
          tokenMintKey && {
            remainingAccounts: [
              { pubkey: tokenMintKey, isWritable: false, isSigner: false },
            ],
          }),
      }
    ),
  ];

  return {
    xpVarsAccount: xpVarsAccountKey,
    xpAccount: xpAccountKey,
    instructions,
  };
};

/** Params for Update XP Account instruction */
export interface UpdateXpAccountParams extends BaseParams {
  admin: PublicKey /** the admin public key */;
  xpAccountKey: PublicKey /** the Xp Account public key */;
  xpLimit?: BN /** The XP limit */;
  tokenRequired?: boolean /** Whether a token is required */;
  tokenQuantity?: BN /** The required token quantity */;
  tokenMintKey?: PublicKey /** The required token mint */;
}

/**
 * Updates an XP Account
 * @param param - the input parameters
 */
export const updateXpAccountIx = async ({
  admin,
  connection,
  xpAccountKey,
  xpLimit,
  tokenRequired,
  tokenQuantity,
  tokenMintKey,
  programId,
}: UpdateXpAccountParams) => {
  const program = getXpProgram(connection, programId);
  const [xpVarsAccountKey] = await findXpVarsAccount(program.programId);

  const xpLimitInput = xpLimit == null ? null : xpLimit;
  const tokenQuantityInput = tokenQuantity == null ? null : tokenQuantity;
  const tokenRequiredInput = tokenRequired == null ? null : tokenRequired;
  const tokenMintKeyInput = tokenMintKey == null ? null : tokenMintKey;

  if (tokenRequiredInput && !tokenMintKeyInput) {
    throw new Error('The token mint is required');
  }

  const instructions = [
    program.instruction.updateXpAccount(
      xpLimitInput,
      tokenQuantityInput,
      tokenRequiredInput,
      {
        accounts: {
          admin,
          xpVarsAccount: xpVarsAccountKey,
          xpAccount: xpAccountKey,
          systemProgram: web3.SystemProgram.programId,
        },
        ...(tokenRequiredInput &&
          tokenMintKeyInput && {
            remainingAccounts: [
              { pubkey: tokenMintKeyInput, isWritable: false, isSigner: false },
            ],
          }),
      }
    ),
  ];

  return {
    xpVarsAccount: xpVarsAccountKey,
    instructions,
  };
};

/** Params for Create User XP Account instruction */
export interface CreateXpUserAccountParams extends BaseParams {
  user: PublicKey /** the user public key */;
  xpAccountKey: PublicKey /** the Xp Account public key */;
}

/**
 * Creates a user XP Account
 * @param param - the input parameters
 */
export const createXpUserAccountIx = async ({
  user,
  connection,
  xpAccountKey,
  programId,
}: CreateXpUserAccountParams) => {
  const program = getXpProgram(connection, programId);
  const [userXpAccountKey] = await findUserXpAccount(
    xpAccountKey,
    user,
    program.programId
  );

  const instructions = [
    program.instruction.createUserXpAccount({
      accounts: {
        user,
        xpAccount: xpAccountKey,
        userXpAccount: userXpAccountKey,
        systemProgram: web3.SystemProgram.programId,
      },
    }),
  ];

  return {
    userXpAccount: userXpAccountKey,
    instructions,
  };
};

/** Params for Create User XP Account instruction with license */
export interface CreateXpUserAccountWithLicenseParams
  extends CreateXpUserAccountParams {
  licenseTokenAccountKey: PublicKey /** the token account for the license to burn */;
  licenseMintAccountKey: PublicKey /** the mint of the license token account */;
}

/**
 * Creates a user XP Account when a license is required
 * @param param - the input parameters
 */
export const createXpUserAccountWithLicenseIx = async ({
  user,
  connection,
  licenseTokenAccountKey,
  licenseMintAccountKey,
  xpAccountKey,
  programId,
}: CreateXpUserAccountWithLicenseParams) => {
  const program = getXpProgram(connection, programId);
  const [userXpAccountKey] = await findUserXpAccount(
    xpAccountKey,
    user,
    program.programId
  );

  const instructions = [
    program.instruction.createUserXpAccountWithLicense({
      accounts: {
        user,
        xpAccount: xpAccountKey,
        userXpAccount: userXpAccountKey,
        userTokenAccount: licenseTokenAccountKey,
        licenseMintAccount: licenseMintAccountKey,
        tokenProgram: TOKEN_PROGRAM_ID,
        systemProgram: web3.SystemProgram.programId,
      },
    }),
  ];

  return {
    userXpAccount: userXpAccountKey,
    instructions,
  };
};

/** Params for Register XP Modifier instruction */
export interface RegisterXpModifierParams extends BaseParams {
  admin: PublicKey /** the admin public key */;
  canIncrement: boolean /** whether the modifier can increment XP */;
  canDecrement: boolean /** whether the modifier can decrement XP */;
  xpAccountKey: PublicKey /** the Xp Account public key */;
  modifierKey: PublicKey /** the modifier public key */;
}

/**
 * Registers an XP modifier
 * @param param - the input parameters
 */
export const registerXpModifierIx = async ({
  admin,
  canIncrement,
  canDecrement,
  connection,
  modifierKey,
  xpAccountKey,
  programId,
}: RegisterXpModifierParams) => {
  const program = getXpProgram(connection, programId);
  const [xpVarsAccountKey] = await findXpVarsAccount(program.programId);
  const [xpModifierAccountKey] = await findXpModifierAccount(
    xpAccountKey,
    modifierKey,
    program.programId
  );

  const instructions = [
    program.instruction.registerXpModifier(canIncrement, canDecrement, {
      accounts: {
        admin,
        xpVarsAccount: xpVarsAccountKey,
        xpAccount: xpAccountKey,
        xpModifierAccount: xpModifierAccountKey,
        modifier: modifierKey,
        systemProgram: web3.SystemProgram.programId,
      },
    }),
  ];

  return {
    xpVarsAccount: xpVarsAccountKey,
    xpModifierAccount: xpModifierAccountKey,
    instructions,
  };
};

/** Params for Deregister XP Modifier instruction */
export interface DeregisterXpModifierParams extends BaseParams {
  admin: PublicKey /** the admin public key */;
  xpAccountKey: PublicKey /** the Xp Account public key */;
  modifierKey: PublicKey /** the modifier public key */;
}

/**
 * De-registers an XP modifier
 * @param param - the input parameters
 */
export const deregisterXpModifierIx = async ({
  admin,
  connection,
  modifierKey,
  xpAccountKey,
  programId,
}: DeregisterXpModifierParams) => {
  const program = getXpProgram(connection, programId);
  const [xpVarsAccountKey] = await findXpVarsAccount(program.programId);
  const [xpModifierAccountKey] = await findXpModifierAccount(
    xpAccountKey,
    modifierKey,
    program.programId
  );

  const instructions = [
    program.instruction.deregisterXpModifier({
      accounts: {
        admin,
        xpVarsAccount: xpVarsAccountKey,
        xpAccount: xpAccountKey,
        xpModifierAccount: xpModifierAccountKey,
        modifier: modifierKey,
        systemProgram: web3.SystemProgram.programId,
      },
    }),
  ];

  return {
    xpVarsAccount: xpVarsAccountKey,
    xpModifierAccount: xpModifierAccountKey,
    instructions,
  };
};

/** Params for XP Modify instruction */
export interface ModifyXpParams extends BaseParams {
  user: PublicKey /** the admin public key */;
  newXpValue: BN /** the new XP value */;
  xpAccountKey: PublicKey /** the Xp Account public key */;
  modifierKey: PublicKey /** the modifier public key */;
}

/**
 * Modifies a user XP account
 * @param param - the input parameters
 */
export const modifyXpIx = async ({
  user,
  newXpValue,
  connection,
  modifierKey,
  xpAccountKey,
  programId,
}: ModifyXpParams) => {
  const program = getXpProgram(connection, programId);
  const [xpVarsAccountKey] = await findXpVarsAccount(program.programId);
  const [userXpAccountKey] = await findUserXpAccount(
    xpAccountKey,
    user,
    program.programId
  );
  const [xpModifierAccountKey] = await findXpModifierAccount(
    xpAccountKey,
    modifierKey,
    program.programId
  );

  const instructions = [
    program.instruction.modifyXp(newXpValue, {
      accounts: {
        user,
        userXpAccount: userXpAccountKey,
        xpAccount: xpAccountKey,
        xpModifierAccount: xpModifierAccountKey,
        modifier: modifierKey,
        systemProgram: web3.SystemProgram.programId,
      },
    }),
  ];

  return {
    xpVarsAccount: xpVarsAccountKey,
    userXpAccount: userXpAccountKey,
    xpModifierAccount: xpModifierAccountKey,
    instructions,
  };
};

/**
 * Gets the XP Vars account
 * @param param - the input parameters
 */
export const getXpVarsAccount = async ({
  connection,
  programId,
}: BaseParams) => {
  const program = getXpProgram(connection, programId);
  const [xpVarsAccountKey] = await findXpVarsAccount(program.programId);
  const xpVarsAccount = await program.account.xpVars.fetch(xpVarsAccountKey);

  return {
    xpVarsAccount: xpVarsAccount as XpVars,
    xpVarsAccountKey: xpVarsAccountKey,
  };
};

/** Params for XP Account getter */
export interface GetXpAccountParams extends BaseParams {
  xpAccountKey: PublicKey /** the Xp Account public key */;
}

/**
 * Gets an XP account
 * @param param - the input parameters
 */
export const getXpAccount = async ({
  xpAccountKey,
  connection,
  programId,
}: GetXpAccountParams) => {
  const program = getXpProgram(connection, programId);
  const xpAccount = await program.account.xpAccount.fetch(xpAccountKey);

  return xpAccount as XpAccount;
};

/** Params for UserXP Account Getter */
export interface GetUserXpAccountParams extends BaseParams {
  userXpAccountKey: PublicKey /** the Xp Account public key */;
}

/**
 * Gets a user XP account
 * @param param - the input parameters
 */
export const getUserXpAccount = async ({
  userXpAccountKey,
  connection,
  programId,
}: GetUserXpAccountParams) => {
  const program = getXpProgram(connection, programId);
  const userXpAccount = await program.account.userXpAccount.fetch(
    userXpAccountKey
  );

  return userXpAccount as UserXpAccount;
};

/** Params for UserXP Account Getter */
export interface GetUserXpAccountViaUserAndXpKeysParams extends BaseParams {
  user: PublicKey /** the Xp Account public key */;
  xpAccountKey: PublicKey /** the Xp Account public key */;
}

/**
 * Gets a user's XP account using the user and XP Account
 * @param param - the input parameters
 */
export const getUserXpAccountViaUserAndXpKeys = async ({
  user,
  xpAccountKey,
  connection,
  programId,
}: GetUserXpAccountViaUserAndXpKeysParams) => {
  const program = getXpProgram(connection, programId);
  const [userXpAccountKey] = await findUserXpAccount(
    xpAccountKey,
    user,
    programId
  );
  const userXpAccount = await program.account.userXpAccount.fetch(
    userXpAccountKey
  );

  return {
    userXpAccountKey,
    userXpAccount: userXpAccount as UserXpAccount,
  };
};

/** Params for User XP Accounts Getter */
export interface GetUserXpAccountsParams extends BaseParams {
  user: PublicKey /** the Xp Account public key */;
}

/**
 * Gets a user's XP accounts
 * @param param - the input parameters
 */
export const getUserXpAccounts = async ({
  user,
  connection,
  programId,
}: GetUserXpAccountsParams) => {
  const program = getXpProgram(connection, programId);
  const userXpAccounts: UserXpAccountItem[] =
    await program.account.userXpAccount.all([
      {
        memcmp: {
          offset: 8,
          bytes: user.toBase58(),
        },
      },
    ]);

  return userXpAccounts;
};

/** Params for XP Modifier account getter */
export interface GetXpModifierAccountParams extends BaseParams {
  xpModifierAccountKey: PublicKey /** the Xp Account public key */;
}

/**
 * Gets an XP Modifier account
 * @param param - the input parameters
 */
export const getXpModifierAccount = async ({
  xpModifierAccountKey,
  connection,
  programId,
}: GetXpModifierAccountParams) => {
  const program = getXpProgram(connection, programId);
  const xpModifierAccount = await program.account.xpModifier.fetch(
    xpModifierAccountKey
  );

  return xpModifierAccount as XpModifier;
};

/** Params for UserXP Account Getter */
export interface GetXpModifierAccountViaModifierAndXpKeysParams
  extends BaseParams {
  modifier: PublicKey /** the Xp Account public key */;
  xpAccountKey: PublicKey /** the Xp Account public key */;
}

/**
 * Gets a user's XP account using the user and XP Account
 * @param param - the input parameters
 */
export const getXpModifierAccountViaModifierAndXpKeys = async ({
  modifier,
  xpAccountKey,
  connection,
  programId,
}: GetXpModifierAccountViaModifierAndXpKeysParams) => {
  const program = getXpProgram(connection, programId);
  const [xpModifierAccountKey] = await findXpModifierAccount(
    xpAccountKey,
    modifier,
    programId
  );
  const xpModifierAccount = await program.account.userXpAccount.fetch(
    xpModifierAccountKey
  );

  return {
    xpModifierAccountKey,
    xpModifierAccount: xpModifierAccount as XpModifier,
  };
};

/** Params for XP Account modifierss Getter */
export interface GetXpAccountModifiersParams extends BaseParams {
  xpAccountKey: PublicKey /** the Xp Account public key */;
}

/**
 * Gets an Xp Account's registered XP modifier accounts
 * @param param - the input parameters
 */
export const getXpAccountModifiers = async ({
  xpAccountKey,
  connection,
  programId,
}: GetXpAccountModifiersParams) => {
  const program = getXpProgram(connection, programId);
  const modifiers = await program.account.xpModifier.all([
    {
      memcmp: {
        offset: 40,
        bytes: xpAccountKey.toBase58(),
      },
    },
  ]);

  return modifiers as XpModifierItem[];
};

/** Params for modifier XP Accounts Getter */
export interface GetModifierXpAccountsParams extends BaseParams {
  modifier: PublicKey /** the Xp Account public key */;
}

/**
 * Gets XP modifiers that belong to a particular modifier
 * @param param - the input parameters
 */
export const getModifierXpAccounts = async ({
  modifier,
  connection,
  programId,
}: GetModifierXpAccountsParams) => {
  const program = getXpProgram(connection, programId);
  const modifiers = await program.account.xpModifier.all([
    {
      memcmp: {
        offset: 8,
        bytes: modifier.toBase58(),
      },
    },
  ]);

  return modifiers as XpModifierItem[];
};
